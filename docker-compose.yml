# -----------------------------------------------------------------------------
# 🐳 docker-compose.yml for Reproducible Lambda Layer Build (Chat Project)
#
# This file defines the `layer-builder` service, which executes the full Makefile
# pipeline inside a consistent and isolated Amazon Linux 2 environment with Python 3.10.
# The goal is to generate an AWS Lambda Layer in a reproducible and portable way.
# -----------------------------------------------------------------------------

services:
  layer-builder:
    # 📦 Docker build context and Dockerfile assumed to be in the current directory
    build:
      context: .

    # 🧬 Force architecture compatibility with AWS Lambda runtime (x86_64)
    platform: linux/x86_64

    # 📂 Mount local project directory into the container at /app
    volumes:
      - .:/app

    # 📍 Set default working directory for all commands
    working_dir: /app

    # 🛠️ Automatically runs the complete build pipeline via Makefile
    # Includes clean, install, package, validate, and ZIP steps
    command: make all

# -----------------------------------------------------------------------------
# 🔁 Build Sequence Executed (via `make all`):
#  1. clean                - Removes previous builds and prepares output folders
#  2. export_requirements  - Converts Poetry dependencies to requirements.txt
#  3. install_dependencies - Installs into the /layer/python/ structure
#  4. build_layer          - Creates ZIP archive for AWS Lambda Layer
#  5. validate_structure   - Verifies layer ZIP and directory contents
#
# ❗️ No external dependencies like Kuma are cloned or fetched in this pipeline.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# 🧪 Usage:
#   docker-compose up --build             # Run full build automatically
#   docker-compose exec layer-builder bash  # Enter container for debugging
#
# 🧠 Notes:
# - Change `platform` to `linux/arm64` if deploying to Graviton Lambdas
# - All artifacts are generated inside the local `/app` directory (bound volume)
# -----------------------------------------------------------------------------
