AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Single-table DynamoDB design to support real-time messaging at scale
  across thousands of users and conversations. Enables efficient queries
  for user profiles, messages, and chat metadata using GSIs.

# ---------------------------------------------------------------------
# üîß PARAMETERS
# These allow reusability across environments (e.g., dev, qa, prod).
# ---------------------------------------------------------------------
Parameters:
  Stage:
    Type: String
    Description: Deployment stage for environment separation (e.g. dev, qa, prod)

Resources:

  # ---------------------------------------------------------------------
  # üóÇÔ∏è ChatAppTable - Core DynamoDB Resource
  #
  # Purpose:
  # Centralized single-table design to store all real-time chat metadata,
  # including user profiles, presence status, messages, and participation.
  #
  # Why Single Table:
  #  - Reduces join-like operations between users/chats/messages.
  #  - Enables fast, scalable access patterns via Partition and Sort Keys.
  #  - Allows multiple entity types (User, Message, Chat) in one table.
  # ---------------------------------------------------------------------
  ChatAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub chat-app-table-${Stage}  # Suffix with stage for isolation

      BillingMode: PAY_PER_REQUEST  # Autoscaling cost-efficient mode

      AttributeDefinitions:
        - AttributeName: PK              # Partition Key
          AttributeType: S
        - AttributeName: SK              # Sort Key
          AttributeType: S
        - AttributeName: GSI1PK          # GSI1 Partition Key (user chat list / message stream)
          AttributeType: S
        - AttributeName: GSI1SK          # GSI1 Sort Key
          AttributeType: S
        - AttributeName: Type            # Used for indexing user types
          AttributeType: S
        - AttributeName: name            # Used for sorting user profiles
          AttributeType: S
        - AttributeName: lastUpdated     # Timestamp of last message
          AttributeType: S

      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

      GlobalSecondaryIndexes:
        # List of chats a user is part of, sorted by recent activity
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

        # Lookup for users by Type + name (e.g. Type = 'User', name = 'Alice')
        - IndexName: TypeNameIndex
          KeySchema:
            - AttributeName: Type
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

        # Efficient querying of messages ordered by timestamp within a chat
        - IndexName: ChatMessageIndex
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: lastUpdated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

      TimeToLiveSpecification:
        AttributeName: ttl  # Used to auto-expire presence records
        Enabled: true

      Tags:
        - Key: Project
          Value: ScalableChatApp
        - Key: Environment
          Value: !Ref Stage

# ---------------------------------------------------------------------
# üì§ OUTPUTS - For referencing table info from other stacks
# ---------------------------------------------------------------------
Outputs:

  ChatAppTableName:
    Description: Name of the chat DynamoDB table
    Value: !Ref ChatAppTable

  ChatAppTableArn:
    Description: ARN of the chat DynamoDB table
    Value: !GetAtt ChatAppTable.Arn
