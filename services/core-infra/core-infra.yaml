# ---------------------------------------------------------------------
# üß† Stack Purpose:
# Highly scalable DynamoDB single-table for real-time chat at scale.
# Optimized for 1-1 conversations across thousands of users and millions of messages.
#
# Responsibilities:
#   1. Store user profiles and presence
#   2. Store 1-1 messages grouped by chatId
#   3. Track chat membership (by user)
#   4. Efficiently list user chats with pagination and ordering
#
# üß∞ Validated with:
#   sam validate --template-file core-infra.yaml --region us-east-1 --lint
# ---------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Single-table DynamoDB design to support real-time messaging at scale
  across thousands of users and conversations.

Resources:

  # ---------------------------------------------------------------------
  # üì¶ ChatAppTable:
  # This is the main (and only) DynamoDB table for the entire chat application.
  # It uses a single-table design to store users, conversations, messages,
  # presence data, and references ‚Äî all in one scalable structure.
  # ---------------------------------------------------------------------
  ChatAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chat-app-table  # Logical name for the table

      BillingMode: PAY_PER_REQUEST
      # Pay-per-request means we don‚Äôt need to provision read/write capacity.
      # It automatically scales with usage and we only pay for what we use.

      # --------------------------------------------------------------
      # üîë Attribute Definitions:
      # Define all attributes that are used in the primary key or indexes.
      # --------------------------------------------------------------
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S  # Partition Key (e.g., USER#123, CHAT#abc)
        - AttributeName: SK
          AttributeType: S  # Sort Key (e.g., PROFILE, MSG#timestamp)
        - AttributeName: Type
          AttributeType: S  # Logical type of the item (User, Message, etc.)
        - AttributeName: GSI1PK
          AttributeType: S  # GSI for listing chats or messages by user
        - AttributeName: GSI1SK
          AttributeType: S  # GSI sort field (e.g., lastUpdated timestamp)

      # --------------------------------------------------------------
      # üß± Primary Key Schema:
      # The main PK/SK schema used for grouping and sorting items.
      # --------------------------------------------------------------
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

      # --------------------------------------------------------------
      # üöÄ Global Secondary Index (GSI1):
      # Used to query all chat references for a user or all messages in a chat.
      # Example: GSI1PK = USER#123 and GSI1SK = timestamp
      # --------------------------------------------------------------
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL  # Include all attributes in GSI results

      # --------------------------------------------------------------
      # ‚è≥ TTL (Time To Live):
      # Enables automatic deletion of items with a 'ttl' timestamp in the past.
      # Useful for expiring ACTIVE# sessions (user presence tracking).
      # --------------------------------------------------------------
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

      # --------------------------------------------------------------
      # üè∑Ô∏è Tags:
      # Help organize and identify resources in AWS Console and billing.
      # --------------------------------------------------------------
      Tags:
        - Key: Project
          Value: ScalableChatApp
        - Key: Environment
          Value: prod

# ---------------------------------------------------------------------
# üì§ Outputs:
# Export values to reference this table in other stacks or Lambda functions.
# Useful for wiring up APIs, Lambdas, or CI/CD pipelines.
# ---------------------------------------------------------------------
Outputs:

  ChatAppTableName:
    Description: Name of the chat DynamoDB table
    Value: !Ref ChatAppTable

  ChatAppTableArn:
    Description: ARN of the chat DynamoDB table
    Value: !GetAtt ChatAppTable.Arn
