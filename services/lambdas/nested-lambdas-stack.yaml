AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

# ---------------------------------------------------------------------
# 📄 Description
# ---------------------------------------------------------------------
# This stack is intended to validate that:
# - The SAM framework is set up properly
# - The deployment pipeline works end-to-end
# - A basic Lambda function can be deployed and executed
#
# It provisions:
# - A minimal IAM role with CloudWatch permissions
# - A single test Lambda function for smoke testing
Description: >
  Simple nested stack to deploy a test Lambda and verify deployment pipeline.

# ---------------------------------------------------------------------
# 🔧 Parameters
# ---------------------------------------------------------------------
# These allow customization for different environments like dev, qa, prod.
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment environment (e.g., dev, staging, prod)

  ChatAppTableName:
    Type: String
  ChatAppTableArn:
      Type: String
# ---------------------------------------------------------------------
# ⚙️ Globals
# ---------------------------------------------------------------------
# These default settings apply to all Lambda functions in this template.
Globals:
  Function:
    Runtime: python3.10         # Lambda uses Python 3.10
    Timeout: 10                 # Maximum execution time in seconds
    MemorySize: 128             # Memory allocated to the Lambda (MB)

# ---------------------------------------------------------------------
# 🧱 Resources
# ---------------------------------------------------------------------
Resources:

  # -----------------------------------------------------------------
  # 🔐 IAM Roles para Lambdas de chat
  # -----------------------------------------------------------------
  ConnectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub connect-lambda-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBWriteAndLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Ref ChatAppTableArn

  DisconectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub disconnect-lambda-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBWriteAndLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !Ref ChatAppTableArn

  SendMessageLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub send-message-lambda-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FullDynamoDBAndWS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !Ref ChatAppTableArn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: "*"

  # -----------------------------------------------------------------
  # 🔐 IAM Role for Lambda execution
  # -----------------------------------------------------------------
  # Grants the Lambda function permissions to write logs to CloudWatch.
  TestLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub test-lambda-execution-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com   # Only Lambda can assume this role
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"                 # Allows logging to any group/stream

  # -----------------------------------------------------------------
  # 🧪 Test Lambda Function
  # -----------------------------------------------------------------
  # This is a minimal Lambda meant to verify that everything is working.
  TestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub test-lambda-function-${Stage}
      Handler: handler.lambda_handler          # Python entry point: handler.py -> lambda_handler
      CodeUri: test_lambda/core                # Folder containing the Lambda code
      Role: !GetAtt TestLambdaExecutionRole.Arn # Attach the IAM role defined above


  PostConfirmationExecutionRole :
    Type : AWS::IAM::Role
    Properties :
      RoleName : !Sub post-confirmation-execution-role-${Stage}
      AssumeRolePolicyDocument :
        Version : '2012-10-17'
        Statement :
          - Effect : Allow
            Principal :
              Service : lambda.amazonaws.com
            Action : sts:AssumeRole
      Policies :
        - PolicyName : DynamoDBWriteAndLog
          PolicyDocument :
            Version : '2012-10-17'
            Statement :
              - Effect : Allow
                Action :
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource : "*"
              - Effect : Allow
                Action :
                  - dynamodb:PutItem
                Resource : !Ref ChatAppTableArn

  # Lambda asociada al rol anterior
  PostConfirmationLambda :
    Type : AWS::Serverless::Function
    Properties :
      FunctionName : !Sub post-confirmation-lambda-${Stage}
      Handler : handler.lambda_handler
      CodeUri : post_confirmation/core
      Role : !GetAtt PostConfirmationExecutionRole.Arn
      Environment :
        Variables :
          TABLE_NAME : !Ref ChatAppTableName

  # Permiso explícito para que Cognito invoque la Lambda como trigger
  #PostConfirmationInvokePermission :
  #  Type : AWS::Lambda::Permission
  #  Properties :
  #    Action : lambda:InvokeFunction
  #    FunctionName : !Ref PostConfirmationLambda
  #    Principal : cognito-idp.amazonaws.com
  #    SourceArn : arn:aws:cognito-idp:us-east-1:533267106997:userpool/us-east-1_yMEYItvec

  # -----------------------------------------------------------------
  # 💬 Lambdas principales de chat
  # -----------------------------------------------------------------
  ConnectLambda :
    Type : AWS::Serverless::Function
    Properties :
      FunctionName : !Sub connect-lambda-${Stage}
      Handler : handler.lambda_handler
      CodeUri : lambda_connect
      Role : !GetAtt ConnectLambdaRole.Arn
      Environment :
        Variables :
          TABLE_NAME : !Ref ChatAppTableName

  DisconectLambda :
    Type : AWS::Serverless::Function
    Properties :
      FunctionName : !Sub disconnect-lambda-${Stage}
      Handler : handler.lambda_handler
      CodeUri : lambda_disconect
      Role : !GetAtt DisconectLambdaRole.Arn
      Environment :
        Variables :
          TABLE_NAME : !Ref ChatAppTableName

  SendMessageLambda :
    Type : AWS::Serverless::Function
    Properties :
      FunctionName : !Sub send-message-lambda-${Stage}
      Handler : handler.lambda_handler
      CodeUri : lambda_send_message
      Role : !GetAtt SendMessageLambdaRole.Arn
      Environment :
        Variables :
          TABLE_NAME : !Ref ChatAppTableName
          REGION : !Ref AWS::Region
      #    WS_API_ID : !Ref ChatWebSocketApiId  #

  ConnectLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectLambda
      Principal: apigateway.amazonaws.com

  DisconectLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconectLambda
      Principal: apigateway.amazonaws.com

  SendMessageLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageLambda
      Principal: apigateway.amazonaws.com
# ---------------------------------------------------------------------
# 📤 Outputs
# ---------------------------------------------------------------------
# These outputs can be used for debugging or referenced in other stacks
Outputs:

  TestLambdaFunctionName :
    Description : Logical name of the deployed test Lambda function
    Value : !Ref TestLambdaFunction

  TestLambdaFunctionArn :
    Description : ARN of the deployed test Lambda function
    Value : !GetAtt TestLambdaFunction.Arn

  PostConfirmationLambdaName :
    Description : Logical name of the deployed PostConfirmation Lambda
    Value : !Ref PostConfirmationLambda

  PostConfirmationLambdaArn :
    Description : ARN of the deployed PostConfirmation Lambda
    Value : !GetAtt PostConfirmationLambda.Arn

  ConnectLambdaArn :
    Description : ARN of the Connect Lambda
    Value : !GetAtt ConnectLambda.Arn
    Export :
      Name : ConnectLambdaArn

  DisconectLambdaArn :
    Description : ARN of the Disconnect Lambda
    Value : !GetAtt DisconectLambda.Arn
    Export :
      Name : DisconectLambdaArn

  SendMessageLambdaArn :
    Description : ARN of the SendMessage Lambda
    Value : !GetAtt SendMessageLambda.Arn
    Export :
      Name : SendMessageLambdaArn
